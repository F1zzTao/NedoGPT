import os

import ai_stuff
from base import Conversation, Message, Prompt
from constants import (
    AI_EMOJI,
    BOT_ID,
    HELP_MSG,
    SYSTEM_EMOJI,
)
from db import (
    get_user_created_moods,
    update_mood_value,
    create_account,
    create_tables,
    delete_account,
    get_mood,
    is_registered,
    get_user_mood,
    get_all_moods,
    update_value,
    create_mood
)
from dotenv import load_dotenv
from keyboards import OPEN_SETTINGS_KBD, SETTINGS_KBD
from loguru import logger
from openai import AsyncOpenAI
from utils import (
    moderate_query,
    moderate_result,
    process_instructions,
)
from vkbottle.bot import Bot
from vkbottle.bot import Message as VkMessage
from vkbottle import Keyboard
from vkbottle import KeyboardButtonColor as Color
from vkbottle import Text

load_dotenv()

bot = Bot(os.environ["VK_API_KEY"])
bot.labeler.vbml_ignore_case = True  # type: ignore
group_id = os.environ["VK_GROUP_ID"]
client = AsyncOpenAI(api_key=os.environ["OPENAI_API_KEY"])


@bot.on.message(text="!aihelp")
async def ai_help_handler(_: VkMessage):
    return HELP_MSG


@bot.on.message(text=("!tokenize", "!tokenize <query>"))
async def count_tokens_handler(message: VkMessage, query: str | None = None):
    await message.get_user()

    if query is None and message.reply_message is None:
        return f"{SYSTEM_EMOJI} –≠—ç—ç... –ê —á—Ç–æ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ?"

    if query is None:
        num_tokens = ai_stuff.num_tokens_from_string(message.reply_message.text)
    else:
        num_tokens = ai_stuff.num_tokens_from_string(query)

    ending = ('' if num_tokens == 1 else '–∞' if num_tokens < 5 else '–æ–≤')
    cost = num_tokens/1000*0.0015
    cost_rounded = "{:.5f}".format(cost)
    return f"{SYSTEM_EMOJI} –í —Å–æ–æ–±—â–µ–Ω–∏–∏ {num_tokens} —Ç–æ–∫–µ–Ω{ending} (${cost_rounded})!"


@bot.on.message(text=('!ai <query>', '!gpt3 <query>'))
async def ai_txt_handler(message: VkMessage, query: str):
    try:
        user = await message.get_user(fields=["bdate", "city", "sex"])
        full_name = user.first_name + " " + user.last_name
    except IndexError:
        # User is a group
        user = None
        full_name = "Anonymous"

    conv = Conversation([Message(query.replace("debug ", ""), str(message.from_id), full_name)])

    reply_user = None
    if message.reply_message is not None:
        try:
            reply_user = await message.reply_message.get_user()
            reply_full_name = reply_user.first_name + " " + reply_user.last_name
        except IndexError:
            # Reply user is a group
            reply_user = None
            reply_full_name = "Anonymous"
        conv.prepend(
            Message(
                message.reply_message.text,
                str(message.reply_message.from_id),
                reply_full_name
            )
        )

    conversation_text = conv.render(incl_full_name=False)

    fail_reason = await moderate_query(conversation_text, client)
    if fail_reason:
        return fail_reason

    try:
        user_mood = await get_user_mood(message.from_id)
    except TypeError:
        # User is a group or he doesn't have an account
        # Defaulting to assistant mood
        user_mood = await get_mood(0)

    chat_info = (
        await bot.api.messages.get_conversations_by_id(peer_ids=[message.peer_id])
    ).items[0]

    user_mood_instr = user_mood[5]
    mood_instr = process_instructions(
        user_mood_instr,
        (user if reply_user is None else None),
        chat_info
    )

    prompt = Prompt(
        header=Message(mood_instr),
        convo=conv
    )
    response = await ai_stuff.create_response(client, prompt)
    logger.info(response)

    moderated = moderate_result(response)
    if moderated[0] == 1:
        return moderated[1]

    response = moderated[1]
    msg_reply = f"{AI_EMOJI} {response}"

    if query.startswith("debug "):
        msg_reply += (
            f"\n\n{SYSTEM_EMOJI} –†–∞–∑–Ω–∞—è —Ñ–∏–≥–Ω—è: "
            f"\nfull prompt: {prompt.full_render(BOT_ID)}"
        )
    await message.reply(msg_reply)


@bot.on.message(text=("–Ω–∞—á–∞—Ç—å", "!–Ω–∞—á–∞—Ç—å"))
async def start_handler(message: VkMessage):
    if message.from_id < 0:
        # Groups can't have an account
        return f"{SYSTEM_EMOJI} –ù–µ—Ç, –±–æ—Ç—ë–Ω–æ–∫, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ–ª–æ–≤–µ–∫–æ–º!"

    if (await is_registered(message.from_id)):
        # Person is already registered
        return f"{SYSTEM_EMOJI} –ì–µ–Ω–∏–π, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–æ—Ç–µ. –°–º–∏—Ä–∏—Å—å —Å —ç—Ç–∏–º."

    await create_account(message.from_id)
    await message.answer(
        f"{SYSTEM_EMOJI} –ê–∫–∫–∞—É–Ω—Ç –≥–æ—Ç–æ–≤; —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ—Ç–∞!",
        keyboard=OPEN_SETTINGS_KBD
    )


@bot.on.message(text="!–≥–ø—Ç–Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
@bot.on.message(payload={"cmd": "settings"})
async def open_settings_handler(message: VkMessage):
    if not (await is_registered(message.from_id)):
        return f"{SYSTEM_EMOJI} –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!"

    user_mood = await get_user_mood(message.from_id)
    logger.info(user_mood)
    mood_id = user_mood[0]
    mood_name = user_mood[3]

    await message.answer(
        f"{SYSTEM_EMOJI} –¢–µ–∫—É—â–∏–π –º—É–¥: {mood_name} (id: {mood_id})", keyboard=SETTINGS_KBD
    )


@bot.on.message(text=("!–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", "!–º—É–¥—ã", "!–∫–∞—Å—Ç–æ–º—ã"))
@bot.on.message(payload={"cmd": "change_gpt_mood_info"})
async def list_mood_handler(message: VkMessage):
    moods = await get_all_moods(public_only=True)
    if len(moods) == 0:
        return f"{SYSTEM_EMOJI} –ü—É–±–ª–∏—á–Ω—ã—Ö –º—É–¥–æ–≤ –≤ –±–æ—Ç–µ –ø–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"

    all_moods_str = f"{SYSTEM_EMOJI} –í–æ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º—É–¥—ã:"
    for mood in moods:
        mood_id = mood[0]
        mood_name = mood[3]
        all_moods_str += f"\n‚Ä¢ {mood_name} (id: {mood_id})"
    return all_moods_str


@bot.on.message(text=("!–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ <mood_id:int>", "!–º—É–¥ <mood_id:int>"))
async def custom_mood_info(message: VkMessage, mood_id: int):
    custom_mood = await get_mood(mood_id)
    not_exists_msg = f"{SYSTEM_EMOJI} –ê–π–¥–∏ —Å —Ç–∞–∫–∏–º –º—É–¥–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π!"
    if not custom_mood or (custom_mood[2] == 0 and custom_mood[1] != message.from_id):
        return not_exists_msg

    mood_id, mood_creator_id, _, mood_name, mood_desc, mood_instr = custom_mood
    creator_info = (await bot.api.users.get(user_ids=[mood_creator_id], name_case="gen"))[0]
    creator_full_name_gen = f"{creator_info.first_name} {creator_info.last_name}"

    choose_this_kbd = (
        Keyboard(inline=True)
        .add(Text("–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –º—É–¥", payload={"set_mood_id": mood_id}), color=Color.PRIMARY)
    ).get_json()

    await message.answer(
        f"{SYSTEM_EMOJI} –ú—É–¥ –æ—Ç [id{mood_creator_id}|{creator_full_name_gen}] - id: {mood_id}"
        f"\nüë§ | –ò–º—è: {mood_name}"
        f"\nüóí | –û–ø–∏—Å–∞–Ω–∏–µ: {mood_desc or '<–ù–µ—Ç—É>'}"
        f"\nü§ñ | –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {mood_instr}",
        keyboard=choose_this_kbd,
        disable_mentions=True,
    )


@bot.on.message(
    text=(
        "!–ø–æ–º–µ–Ω—è—Ç—å –º—É–¥ <mood_id:int>",
        "!—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—É–¥ <mood_id:int>",
        "!–≤—ã–±—Ä–∞—Ç—å –º—É–¥ <mood_id:int>",
    )
)
@bot.on.message(payload_map=[("set_mood_id", int)])
async def change_mood_handler(message: VkMessage, mood_id: int | None = None):
    if not (await is_registered(message.from_id)):
        return (
            f"{SYSTEM_EMOJI} –ì–µ–Ω–∏–π, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –º—É–¥,"
            " –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π \"!–Ω–∞—á–∞—Ç—å\"."
        )

    payload = message.get_payload_json()
    if mood_id is None:
        mood_id = payload["set_mood_id"]

    custom_mood = await get_mood(mood_id)
    if not custom_mood or (custom_mood[2] == 0 and message.from_id != custom_mood[1]):
        return f"{SYSTEM_EMOJI} –¢–∞–∫–æ–≥–æ –º—É–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
    mood_id = custom_mood[0]
    mood_name = custom_mood[3]

    await update_value(message.from_id, "selected_mood_id", mood_id)
    return f"{SYSTEM_EMOJI} –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –º—É–¥ \"{mood_name}\" (id: {mood_id})"


@bot.on.message(text=("!—Å–æ–∑–¥–∞—Ç—å –º—É–¥", "!–Ω–æ–≤—ã–π –º—É–¥"))
async def custom_mood_info_handler(_: VkMessage):
    return (
        f"{SYSTEM_EMOJI} –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º—É–¥,"
        " –Ω–∞–ø–∏—à–∏—Ç–µ \"!—Å–æ–∑–¥–∞—Ç—å –º—É–¥ <–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏>\""
        "\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!"
        "\n–ù–∞–ø—Ä–∏–º–µ—Ä: You are now a cute anime girl. Don't forget to use :3 and other things"
        " that cute anime girls say. Speak only Russian."
    )


@bot.on.message(text=("!—Å–æ–∑–¥–∞—Ç—å –º—É–¥ <instr>", "!–Ω–æ–≤—ã–π –º—É–¥ <instr>"))
async def new_custom_mood_handler(message: VkMessage, instr: str | None = None):
    if not (await is_registered(message.from_id)):
        return (
            f"{SYSTEM_EMOJI} –ì–µ–Ω–∏–π, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –º—É–¥,"
            " –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π \"!–Ω–∞—á–∞—Ç—å\"."
        )

    fail_reason = await moderate_query(instr, client)
    if fail_reason:
        return fail_reason

    user_moods = await get_user_created_moods(message.from_id)
    if len(user_moods) >= 5:
        return f"{SYSTEM_EMOJI} –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ 5 –º—É–¥–æ–≤!"

    # Creating mood
    inserted_id = await create_mood(message.from_id, "–ú–æ–π –º—É–¥", instr)

    # Adding new mood to this user's created moods
    user_moods.append(inserted_id)
    user_moods = [str(i) for i in user_moods]
    await update_value(message.from_id, "created_moods_ids", ','.join(user_moods))

    return (
        f"{SYSTEM_EMOJI} –í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –º—É–¥! –ï–≥–æ –∞–π–¥–∏: {inserted_id}"
        "\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:"
        f"\n1. –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"!–º—É–¥ –∏–º—è {inserted_id} <–Ω–∞–∑–≤–∞–Ω–∏–µ –º—É–¥–∞>\"."
        "\n2. –ü–æ–º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã"
        f" \"!–º—É–¥ –æ–ø–∏—Å–∞–Ω–∏–µ {inserted_id} <–æ–ø–∏—Å–∞–Ω–∏–µ –º—É–¥–∞>\"."
        f"\n3. –°–¥–µ–ª–∞—Ç—å –º—É–¥ –ø—É–±–ª–∏—á–Ω—ã–º, —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"!–º—É–¥ –≤–∏–¥–∏–º–æ—Å—Ç—å {inserted_id}\"."
        "\n4. –ü–æ–º–µ–Ω—è—Ç—å –µ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –µ—Å–ª–∏ –≤–∞–º —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –Ω–∏—Ö."
        f" –ö–æ–º–∞–Ω–¥–∞: \"!–º—É–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ {inserted_id} <–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏>\""
    )


@bot.on.message(text="!–º—É–¥ <params_str>")
async def customize_mood_handler(message: VkMessage, params_str: str):
    if not (await is_registered(message.from_id)):
        return (
            f"{SYSTEM_EMOJI} –ß—Ç–æ —Ç—ã —Ç–∞–º –º–µ–Ω—è—Ç—å —Å–æ–±—Ä–∞–ª—Å—è? –£ —Ç–µ–±—è –¥–∞–∂–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç!"
            "\n... –ü–æ—ç—Ç–æ–º—É –º–æ–∂–µ—à—å –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å, —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"!–Ω–∞—á–∞—Ç—å\"."
        )
    params = params_str.split()
    logger.info(f"Got these params: {params}")
    try:
        mood_id = int(params[1])
    except (KeyError, ValueError):
        return (
            f"{SYSTEM_EMOJI} –¢—ã —á–µ—Ç –Ω–µ —Ç–æ –Ω–∞–ø–∏—Å–∞–ª, –±—Ä–æ—É!"
            "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ, –≤–∏–¥–∏–º–æ—Å—Ç—å"
        )

    user_moods = await get_user_created_moods(message.from_id)
    if mood_id not in user_moods:
        return f"{SYSTEM_EMOJI} –ì–µ–Ω–∏–π, —ç—Ç–æ –Ω–µ —Ç–≤–æ–π –º—É–¥! –°–¥–µ–ª–∞–π –µ–≥–æ –∫–æ–ø–∏—é –∏ –º–µ–Ω—è–π –∫–∞–∫ —Ö–æ—á–µ—à—å."

    success_msg = ""
    if params[0] in ("–∏–º—è", "–Ω–∞–∑–≤–∞–Ω–∏–µ"):
        mood_name = ' '.join(params[2:])
        fail_reason = await moderate_query(mood_name)
        if fail_reason:
            return fail_reason

        await update_mood_value(mood_id, "name", mood_name)
        success_msg = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º—É–¥–∞!"
    elif params[0] == "–æ–ø–∏—Å–∞–Ω–∏–µ":
        mood_desc = ' '.join(params[2:])
        fail_reason = await moderate_query(mood_desc)
        if fail_reason:
            return fail_reason

        await update_mood_value(mood_id, "desc", mood_desc)
        success_msg = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º—É–¥–∞!"
    elif params[0] == "–≤–∏–¥–∏–º–æ—Å—Ç—å":
        mood = await get_mood(mood_id)
        visibility = mood[2]

        new_visibility = 1
        if visibility == 1:
            new_visibility = 0
        visibility_status = ('–ø—É–±–ª–∏—á–Ω—ã–π' if new_visibility else '–ø—Ä–∏–≤–∞—Ç–Ω—ã–π')

        await update_mood_value(mood_id, "visibility", new_visibility)
        success_msg = f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –≤–∏–¥–∏–º–æ—Å—Ç—å –º—É–¥–∞ –Ω–∞ \"{visibility_status}\""
    elif params[0] == "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏":
        mood_instr = ' '.join(params[2:])
        fail_reason = await moderate_query(mood_instr, client)
        if fail_reason:
            return fail_reason

        await update_mood_value(mood_id, "instructions", mood_instr)
        success_msg = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –º—É–¥–∞!"
    else:
        return f"{SYSTEM_EMOJI} –≠—ç—ç... –ß—Ç–æ? –¢–∞–∫–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç—É, —É–∂ –∏–∑–≤–∏–Ω–∏!"
    return SYSTEM_EMOJI + " " + success_msg


@bot.on.message(text="!–º–æ–∏ –º—É–¥—ã")
async def my_moods_handler(message: VkMessage):
    if not (await is_registered(message.from_id)):
        return (
            f"{SYSTEM_EMOJI} –ì–µ–Ω–∏–π, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –º—É–¥,"
            " –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π \"!–Ω–∞—á–∞—Ç—å\"."
        )

    user_moods = await get_user_created_moods(message.from_id)
    if len(user_moods) == 0:
        return (
            f"{SYSTEM_EMOJI} –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ, –Ω–æ –≤—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–¥!"
            "\n–ß—Ç–æ–±—ã –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ \"!—Å–æ–∑–¥–∞—Ç—å –º—É–¥\""
        )

    user_moods_message = f"{SYSTEM_EMOJI} –í–∞—à–∏ –º—É–¥—ã:"
    for mood in user_moods:
        pub_mood = await get_mood(mood)
        user_moods_message += f"\n‚Ä¢ {pub_mood[3]} (id: {pub_mood[0]})"

    return user_moods_message


@bot.on.message(text="!—É–¥–∞–ª–∏—Ç—å –≥–ø—Ç")
@bot.on.message(payload={"cmd": "delete_account"})
async def delete_account_handler(message: VkMessage):
    if not (await is_registered(message.from_id)):
        return (
            f"{SYSTEM_EMOJI} –ü–æ–∫–∞ –º—ã –∂–∏–≤–µ–º –≤ 2024, —ç—Ç–æ—Ç –≥–µ–Ω–∏–π –∂–∏–≤–µ—Ç –≤ 1488"
            "\n–£ –≤–∞—Å –∏ —Ç–∞–∫ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞. –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ!"
        )
    await delete_account(message.from_id)
    return f"{SYSTEM_EMOJI} –ì–æ—Ç–æ–≤–æ... –Ω–æ –∑–∞—á–µ–º?"


if __name__ == "__main__":
    logger.info("Starting bot...")
    bot.loop_wrapper.on_startup.append(create_tables())
    bot.run_forever()

from sqlite3 import Row

from loguru import logger

import ai_stuff
from base import Conversation, Message, Prompt, UserInfo
from constants import (
    AI_EMOJI,
    HELP_MSG,
    MODEL_IDS,
    OPENAI_BASE_URL,
    OPENROUTER_HEADERS,
    SYSTEM_BOT_PROMPT,
    SYSTEM_EMOJI,
    VK_ADMIN_ID
)
from db import (
    create_account,
    create_balance,
    create_mood,
    delete_account,
    delete_mood,
    get_all_moods,
    get_mood,
    get_user_created_moods,
    get_user_model,
    get_user_mood,
    get_value,
    increase_value,
    is_registered,
    update_mood_value,
    update_value
)
from utils import moderate_query, moderate_result, process_instructions


async def handle_start(user_id: int, platform: str) -> tuple[str, bool]:
    # bool means if kbd should be returned ot not
    if user_id < 0:
        # ? Does TG works the same way?
        # Groups can't have an account
        return (
            f"{SYSTEM_EMOJI} –ù–µ—Ç, –±–æ—Ç—ë–Ω–æ–∫, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ–ª–æ–≤–µ–∫–æ–º!", False
        )

    if (await is_registered(user_id)):
        # Person is already registered
        return (f"{SYSTEM_EMOJI} –ì–µ–Ω–∏–π, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–æ—Ç–µ. –°–º–∏—Ä–∏—Å—å —Å —ç—Ç–∏–º.", False)

    await create_account(user_id, platform)
    return (f"{SYSTEM_EMOJI} –ê–∫–∫–∞—É–Ω—Ç –≥–æ—Ç–æ–≤; —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ—Ç–∞!", True)


def handle_help() -> str:
    return HELP_MSG


async def handle_ai(
    query: str,
    user: UserInfo,
    bot_id: int,
    reply_user: UserInfo | None = None,
    reply_query: str | None = None,
):
    conv = Conversation([Message(query, str(user.user_id), user.full_name)])

    if reply_user:
        if reply_query is None:
            raise ValueError("Reply user is set but reply query is empty")
        reply_full_name = reply_user.full_name or "Anonymous"
        conv.prepend(
            Message(
                reply_query,
                str(reply_user.user_id),
                reply_full_name
            )
        )

    conversation_text = conv.render(incl_full_name=False)

    user_model: dict | None = await get_user_model(user.user_id)
    if not user_model:
        return (
            f"{SYSTEM_EMOJI} –í–∞—à–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é."
            "\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π \"!–º–æ–¥–µ–ª–∏\"."
        )

    model_name: str = user_model['name']
    if user_model.get("deprecation"):
        if user_model["deprecation"]["is_deprecated"]:
            return (
                f"{SYSTEM_EMOJI} –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å ({user_model['name']}) —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞,"
                " –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É \"!–º–æ–¥–µ–ª—å <–∞–π–¥–∏ –º–æ–¥–µ–ª–∏>\". –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ"
                " –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π \"!–º–æ–¥–µ–ª–∏\""
            )

    model_price = user_model['price']
    balance = await get_value(user.user_id, "sushi_amount", "sushi_balance")

    if balance is None:
        await create_balance(user.user_id)
    # elif balance <= model_price:
    #     return (
    #         f"{SYSTEM_EMOJI} –¢—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–∫–æ—Ä–º–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å—É—à–∞–º–∏, –Ω–µ–≥–æ–¥—è–π!!"
    #         f"\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ —Å—Ç–æ–∏—Ç {model_price} —Å—É—à, –∞ —É —Ç–µ–±—è –≤—Å–µ–≥–æ {balance} üç£!"
    #     )

    fail_reason = await moderate_query(conversation_text)
    if fail_reason:
        return fail_reason

    try:
        user_mood = await get_user_mood(user.user_id)
    except TypeError:
        # User is a group or he doesn't have an account
        # Defaulting to assistant mood
        user_mood = await get_mood(0)

    if user_mood is None:
        raise ValueError("Couldn't find specified mood or assistant mood.")

    user_mood_instr = user_mood[5]
    mood_instr = await process_instructions(
        user_mood_instr,
        (user.user_id if reply_user is None else None),
    )

    system_prompt = SYSTEM_BOT_PROMPT+'\n'+mood_instr

    prompt = Prompt(
        headers=[
            Message(system_prompt),
        ],
        convo=conv
    )

    messages_rendered = None
    prompt_rendered = None
    if user_model['template']:
        prompt_rendered = await prompt.full_render_template(str(bot_id), user_model['template'])
    else:
        messages_rendered = prompt.full_render(str(bot_id))

    response = await ai_stuff.create_response(
        OPENROUTER_HEADERS, OPENAI_BASE_URL, messages_rendered, prompt_rendered, model_name
    )
    logger.info(response)

    if not response:
        return (
            f"{SYSTEM_EMOJI} –û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ –±—ã–ª —Å—ä–µ–¥–µ–Ω. –í—Å–µ —Ä–∞–≤–Ω–æ –æ–Ω –±—ã–ª –Ω–µ–≤–∫—É—Å–Ω—ã–π (–º–æ–¥–µ—Ä–∞—Ü–∏—è)."
        )

    moderated = moderate_result(response)
    if moderated[0] == 1:
        return moderated[1]

    response = moderated[1].strip()

    # Taking some sushi from the user
    # await increase_value(user.user_id, "sushi_amount", -model_price, "sushi_balance")
    msg_reply = f"{AI_EMOJI} {response}"

    return msg_reply


async def handle_settings(user_id: int) -> tuple[str, bool]:
    if not (await is_registered(user_id)):
        return (f"{SYSTEM_EMOJI} –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!", False)

    user_mood = await get_user_mood(user_id)
    logger.info(user_mood)
    mood_id = user_mood[0]
    mood_name = user_mood[3]

    user_model = await get_user_model(user_id)
    model_name = user_model['name']
    if user_model.get("deprecation"):
        if user_model["deprecation"]["warning"]:
            model_name += " ‚ö†Ô∏è"

    sushi_amount: int = await get_value(user_id, "sushi_amount", "sushi_balance") or 0

    return (
        f"{SYSTEM_EMOJI} | –¢–µ–∫—É—â–∏–π –º—É–¥: {mood_name} (id: {mood_id})\n"
        f"ü§ñ | –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model_name}\n"
        f"üç£ | –í–∞—à–∏ —Å—É—à–∏: {sushi_amount}",
        True
    )


async def handle_mood_list() -> str:
    moods = await get_all_moods(public_only=True)
    if len(moods) == 0:
        return f"{SYSTEM_EMOJI} –ü—É–±–ª–∏—á–Ω—ã—Ö –º—É–¥–æ–≤ –≤ –±–æ—Ç–µ –ø–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"

    all_moods_str = f"{SYSTEM_EMOJI} –í–æ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º—É–¥—ã:"
    for mood in moods:
        mood_id = mood[0]
        mood_name = mood[3]
        all_moods_str += f"\n‚Ä¢ {mood_name} (id: {mood_id})"
    return all_moods_str


async def mood_exists(user_id: int, mood_id: int) -> str | Row:
    mood = await get_mood(mood_id)
    if not mood or (mood[2] == 0 and mood[1] not in (user_id, VK_ADMIN_ID)):
        return f"{SYSTEM_EMOJI} –ê–π–¥–∏ —Å —Ç–∞–∫–∏–º –º—É–¥–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π!"
    return mood


async def handle_mood_info(mood, full_name: str | None = None) -> str:
    mood_id, mood_creator_id, _, mood_name, mood_desc, mood_instr = mood
    if full_name:
        mood_by = f"[id{mood_creator_id}|{full_name}]"
    else:
        mood_by = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    return (
        f"{SYSTEM_EMOJI} –ú—É–¥ –æ—Ç {mood_by} - id: {mood_id}"
        f"\nüë§ | –ò–º—è: {mood_name}"
        f"\nüóí | –û–ø–∏—Å–∞–Ω–∏–µ: {mood_desc or '<–ù–µ—Ç—É>'}"
        f"\nü§ñ | –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {mood_instr}"
    )


async def handle_set_mood(user_id: int, mood_id: int) -> str:
    if not (await is_registered(user_id)):
        return f"{SYSTEM_EMOJI} –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!"

    custom_mood = await get_mood(mood_id)
    if not custom_mood or (custom_mood[2] == 0 and user_id != custom_mood[1]):
        return f"{SYSTEM_EMOJI} –¢–∞–∫–æ–≥–æ –º—É–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
    mood_id = custom_mood[0]
    mood_name = custom_mood[3]

    await update_value(user_id, "selected_mood_id", mood_id)
    return f"{SYSTEM_EMOJI} –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –º—É–¥ \"{mood_name}\" (id: {mood_id})"


def handle_create_mood_info(cp: str = "!") -> str:
    return (
        f"{SYSTEM_EMOJI} –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º—É–¥,"
        f" –Ω–∞–ø–∏—à–∏—Ç–µ \"{cp}—Å–æ–∑–¥–∞—Ç—å –º—É–¥ <–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏>\""
        "\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!"
        "\n–ù–∞–ø—Ä–∏–º–µ—Ä: You are now a cute anime girl. Don't forget to use :3 and other things"
        " that cute anime girls say. Speak only Russian."
    )


async def handle_create_mood(user_id: str, instr: str, cp: str = "!") -> str:
    if not (await is_registered(user_id)):
        return (
            f"{SYSTEM_EMOJI} –ì–µ–Ω–∏–π, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –º—É–¥,"
            f" –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π \"{cp}–Ω–∞—á–∞—Ç—å\"."
        )

    fail_reason = await moderate_query(instr)
    if fail_reason:
        return fail_reason

    user_moods = await get_user_created_moods(user_id)
    if len(user_moods) >= 10 and user_id != VK_ADMIN_ID:
        return f"{SYSTEM_EMOJI} –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ 10 –º—É–¥–æ–≤!"

    # Creating mood
    inserted_id = await create_mood(user_id, "–ú–æ–π –º—É–¥", instr)

    # Adding new mood to this user's created moods
    user_moods.append(inserted_id)
    user_moods = [str(i) for i in user_moods]
    await update_value(user_id, "created_moods_ids", ','.join(user_moods))

    # TODO: Make a keyboard for choosing a just created mood

    return (
        f"{SYSTEM_EMOJI} –í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –º—É–¥! –ï–≥–æ –∞–π–¥–∏: {inserted_id}"
        "\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:"
        f"\n1. –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"{cp}–º—É–¥ –∏–º—è {inserted_id} <–Ω–∞–∑–≤–∞–Ω–∏–µ –º—É–¥–∞>\"."
        "\n2. –ü–æ–º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã"
        f" \"{cp}–º—É–¥ –æ–ø–∏—Å–∞–Ω–∏–µ {inserted_id} <–æ–ø–∏—Å–∞–Ω–∏–µ –º—É–¥–∞>\"."
        f"\n3. –°–¥–µ–ª–∞—Ç—å –º—É–¥ –ø—É–±–ª–∏—á–Ω—ã–º, —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"{cp}–º—É–¥ –≤–∏–¥–∏–º–æ—Å—Ç—å {inserted_id}\"."
        "\n4. –ü–æ–º–µ–Ω—è—Ç—å –µ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –µ—Å–ª–∏ –≤–∞–º —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –Ω–∏—Ö."
        f" –ö–æ–º–∞–Ω–¥–∞: \"{cp}–º—É–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ {inserted_id} <–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏>\""
    )


async def handle_edit_mood(
    user_id: int, params_str: str, cp: str = "!"
) -> str:
    if not (await is_registered(user_id)):
        return (
            f"{SYSTEM_EMOJI} –ß—Ç–æ —Ç—ã —Ç–∞–º –º–µ–Ω—è—Ç—å —Å–æ–±—Ä–∞–ª—Å—è? –£ —Ç–µ–±—è –¥–∞–∂–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç!"
            f"\n... –ü–æ—ç—Ç–æ–º—É –º–æ–∂–µ—à—å –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å, —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"{cp}–Ω–∞—á–∞—Ç—å\"."
        )
    params = params_str.split()
    logger.info(f"Got these params: {params}")
    try:
        mood_id = int(params[1])
    except (KeyError, ValueError):
        return (
            f"{SYSTEM_EMOJI} –¢—ã —á–µ—Ç –Ω–µ —Ç–æ –Ω–∞–ø–∏—Å–∞–ª, –±—Ä–æ—É!"
            "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ, –≤–∏–¥–∏–º–æ—Å—Ç—å"
        )

    user_moods = await get_user_created_moods(user_id)
    if mood_id not in user_moods:
        return f"{SYSTEM_EMOJI} –ì–µ–Ω–∏–π, —ç—Ç–æ –Ω–µ —Ç–≤–æ–π –º—É–¥! –°–¥–µ–ª–∞–π –µ–≥–æ –∫–æ–ø–∏—é –∏ –º–µ–Ω—è–π –∫–∞–∫ —Ö–æ—á–µ—à—å."

    success_msg = ""
    if params[0] in ("–∏–º—è", "–Ω–∞–∑–≤–∞–Ω–∏–µ"):
        mood_name = ' '.join(params[2:])
        fail_reason = await moderate_query(mood_name)
        if fail_reason:
            return fail_reason

        await update_mood_value(mood_id, "name", mood_name)
        success_msg = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º—É–¥–∞!"
    elif params[0] == "–æ–ø–∏—Å–∞–Ω–∏–µ":
        mood_desc = ' '.join(params[2:])
        fail_reason = await moderate_query(mood_desc)
        if fail_reason:
            return fail_reason

        await update_mood_value(mood_id, "desc", mood_desc)
        success_msg = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º—É–¥–∞!"
    elif params[0] == "–≤–∏–¥–∏–º–æ—Å—Ç—å":
        mood = await get_mood(mood_id)
        visibility = mood[2]

        new_visibility = 1
        if visibility == 1:
            new_visibility = 0
        visibility_status = ('–ø—É–±–ª–∏—á–Ω—ã–π' if new_visibility else '–ø—Ä–∏–≤–∞—Ç–Ω—ã–π')

        await update_mood_value(mood_id, "visibility", new_visibility)
        success_msg = f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –≤–∏–¥–∏–º–æ—Å—Ç—å –º—É–¥–∞ –Ω–∞ \"{visibility_status}\""
    elif params[0] == "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏":
        mood_instr = ' '.join(params[2:])
        fail_reason = await moderate_query(mood_instr)
        if fail_reason:
            return fail_reason

        await update_mood_value(mood_id, "instructions", mood_instr)
        success_msg = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –º—É–¥–∞!"
    else:
        return f"{SYSTEM_EMOJI} –≠—ç—ç... –ß—Ç–æ? –¢–∞–∫–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç—É, —É–∂ –∏–∑–≤–∏–Ω–∏!"
    return SYSTEM_EMOJI + " " + success_msg


async def handle_my_moods(user_id: int, cp: str = "!") -> str:
    if not (await is_registered(user_id)):
        return (
            f"{SYSTEM_EMOJI} –ì–µ–Ω–∏–π, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –º—É–¥,"
            f" –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π \"{cp}–Ω–∞—á–∞—Ç—å\"."
        )

    user_moods = await get_user_created_moods(user_id)
    if len(user_moods) == 0:
        return (
            f"{SYSTEM_EMOJI} –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ, –Ω–æ –≤—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–¥!"
            f"\n–ß—Ç–æ–±—ã –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ \"{cp}—Å–æ–∑–¥–∞—Ç—å –º—É–¥\""
        )

    user_moods_message = f"{SYSTEM_EMOJI} –í–∞—à–∏ –º—É–¥—ã:"
    for mood in user_moods:
        pub_mood = await get_mood(mood)
        user_moods_message += f"\n‚Ä¢ {pub_mood[3]} (id: {pub_mood[0]})"

    return user_moods_message


def handle_persona_info(cp: str = "!") -> str:
    return (
        f"{SYSTEM_EMOJI} –ü–µ—Ä—Å–æ–Ω—É, –∫–∞–∫ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!"
        f"\n–ü—Ä–∏–º–µ—Ä: {cp}–ø–µ—Ä—Å–æ–Ω–∞ I'm Hu Tao. I work in Wangsheng Funeral Parlor"
        " together with Zhongli. I have very long brown twintail hair and flower-shaped"
        " pupils."
    )


async def handle_set_persona(user_id: int, persona: str) -> str:
    if not (await is_registered(user_id)):
        return f"{SYSTEM_EMOJI} –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–µ–Ω –∞–∫–∫–∞—É–Ω—Ç!"

    fail_reason = await moderate_query(persona)
    if fail_reason:
        return fail_reason

    await update_value(user_id, "persona", persona)
    return f"{SYSTEM_EMOJI} –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω—É!"


async def handle_my_persona(user_id: int) -> str:
    if not (await is_registered(user_id)):
        return f"{SYSTEM_EMOJI} –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–µ–Ω –∞–∫–∫–∞—É–Ω—Ç!"

    persona = await get_value(user_id, "persona")
    if persona:
        msg = f"{SYSTEM_EMOJI} –í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞: {persona}"
    else:
        msg = f"{SYSTEM_EMOJI} –£ –≤–∞—Å –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞!"
    return msg


async def handle_models_list(cp: str = "!") -> str:
    msg = f"{SYSTEM_EMOJI} –í–æ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:"
    for model_id in MODEL_IDS:
        model = MODEL_IDS[model_id]['name']
        model_price = MODEL_IDS[model_id]['price']
        if model_price:
            model_price_text = f" - {MODEL_IDS[model_id]['price']} üç£"
        else:
            model_price_text = ""
        new_msg = f"\n‚Ä¢ {model} (id: {model_id}){model_price_text}"

        deprecation_info: dict | None = MODEL_IDS[model_id].get("deprecation")
        if deprecation_info and deprecation_info["is_deprecated"]:
            # Model is deprecated, ignoring it
            continue
        if deprecation_info and deprecation_info["warning"]:
            # Model will become deprecated soon
            new_msg += " ‚ö†Ô∏è"

        msg += new_msg

    msg += f"\n\n–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"{cp}–º–æ–¥–µ–ª—å <–µ—ë –∞–π–¥–∏>\""
    return msg


async def handle_set_model(user_id: int, model_id: int) -> str:
    selected_model: dict | None = MODEL_IDS.get(model_id)
    if selected_model is None:
        return f"{SYSTEM_EMOJI} –ú–æ–¥–µ–ª–∏ —Å —Ç–∞–∫–∏–º –∞–π–¥–∏ –ø–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"

    if selected_model.get("deprecation") and selected_model["deprecation"]["is_deprecated"]:
        return (
            f"{SYSTEM_EMOJI} –ú–æ–¥–µ–ª—å {selected_model['name']} —É—Å—Ç–∞—Ä–µ–ª–∞ –∏ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è,"
            " –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é!"
        )

    await update_value(user_id, "selected_model_id", model_id)

    msg = (
        f"{SYSTEM_EMOJI} –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –º–æ–¥–µ–ª—å {selected_model['name']}!"
    )
    if selected_model.get("deprecation") and selected_model["deprecation"]["warning"]:
        msg += (
            "\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —É—Å—Ç–∞—Ä–µ–ª–∞ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–æ—Ç–∞. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å."
        )

    if selected_model['bad_russian']:
        msg += (
            "\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –±—ã–ª–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –Ω–∞—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö"
            " –¥–∞–Ω–Ω—ã—Ö –∏ —Å —Ä—É—Å—Å–∫–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
            " –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."
        )
    return msg


async def handle_del_mood(user_id: int, mood_id: int) -> str:
    if not (await is_registered(user_id)):
        return f"{SYSTEM_EMOJI} –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–µ–Ω –∞–∫–∫–∞—É–Ω—Ç!"
    user_moods = await get_user_created_moods(user_id)
    if mood_id not in user_moods or user_id != VK_ADMIN_ID:
        return (
            f"{SYSTEM_EMOJI} –ì–µ–Ω–∏–π, —ç—Ç–æ –Ω–µ —Ç–≤–æ–π –º—É–¥. –ï—Å–ª–∏ –æ–Ω —Ç–µ–±—è —Ç–∞–∫ —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç,"
            " –ø–æ–ø—Ä–æ—Å–∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è —É–¥–∞–ª–∏—Ç—å –µ–≥–æ."
        )

    await delete_mood(mood_id, user_id)
    return f"{SYSTEM_EMOJI} –í–∞—à –ø–æ–∑–æ—Ä–Ω—ã–π –º—É–¥ —É–¥–∞–ª–µ–Ω –∏ –±–æ–ª—å—à–µ –≤–∞—Å –Ω–µ –ø–æ–∑–æ—Ä–∏—Ç!"


async def handle_del_persona(user_id: int) -> str:
    if not (await is_registered(user_id)):
        return f"{SYSTEM_EMOJI} –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–µ–Ω –∞–∫–∫–∞—É–Ω—Ç!"

    await update_value(user_id, "persona", None)
    return f"{SYSTEM_EMOJI} –ü–µ—Ä—Å–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"


async def handle_del_account_warning(user_id: int) -> str:
    if not (await is_registered(user_id)):
        return (
            f"{SYSTEM_EMOJI} –ü–æ–∫–∞ –º—ã –∂–∏–≤–µ–º –≤ 2024, —ç—Ç–æ—Ç –≥–µ–Ω–∏–π –∂–∏–≤–µ—Ç –≤ 2025"
            "\n–£ –≤–∞—Å –∏ —Ç–∞–∫ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞. –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ!"
        )

    return (
        f"{SYSTEM_EMOJI} –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?"
        " –ù–∞–ø–∏—à–∏—Ç–µ \"!—Ç–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –≥–ø—Ç\" —á—Ç–æ–±—ã –µ–≥–æ —É–¥–∞–ª–∏—Ç—å."
    )


async def handle_del_account(user_id: int) -> str:
    if not (await is_registered(user_id)):
        return f"{SYSTEM_EMOJI} –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–µ–Ω –∞–∫–∫–∞—É–Ω—Ç!"

    await delete_account(user_id)
    return f"{SYSTEM_EMOJI} –ì–æ—Ç–æ–≤–æ... –Ω–æ –∑–∞—á–µ–º?"


async def handle_admin_give_currency(user_id: int, value: int) -> str:
    has_balance = await get_value(user_id, "user_id", "sushi_balance")
    if not has_balance:
        return f"{SYSTEM_EMOJI} –£ [id{user_id}|—ç—Ç–æ–≥–æ] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –ø—Ä–æ—Ñ–∏–ª—è!"

    await increase_value(user_id, "sushi_amount", value, "sushi_balance")
    return f"{SYSTEM_EMOJI} [id{user_id}|–≠—Ç–æ–º—É] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ {value} —Å—É—à–∏!"
